{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","console","log","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACI,sBAAMC,SATU,SAACC,GACjBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAU,OAAIP,GAAJ,mBAAmBO,OAC3CN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAjBY,SAACP,GACrBQ,QAAQC,IAAIT,EAAEU,OAAOJ,OACrBR,EAAcE,EAAEU,OAAOJ,a,+BCNjBK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACdC,EADc,iDACkCC,UAAUH,GAD5C,+DAEDI,MAAMF,GAFL,cAEdG,EAFc,gBAGCA,EAAKC,OAHN,uBAGbC,EAHa,EAGbA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARtB,kBAWbM,GAXa,4CAAH,sDCERO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACpC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECHsB,SAACA,GAEvB,MAA0BhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OATAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GACnBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGnB,CAACpB,IAEIqB,EDZwBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEpB,OACI,qCACI,6BAAKpB,IACAoB,GAAU,2CACV,qBAAKJ,UAAU,YAAf,SAEOH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEIA,GADKA,EAAIC,aEZ5BgB,EAAe,WAExB,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAeA,cAAeA,IAC9B,uBAEA,6BAEQS,EAAWiB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADJA,Y,MCZlC4B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.0296cb19.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange=(e)=>{\r\n        console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit =(e)=>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length>2){\r\n            setCategories(categories =>[inputValue, ...categories]);\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n"," export const getGifs = async(category)=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=HJF0R2NrZ4MGcrDNl40M7KUmgpDUYcKN`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map(img =>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n   \r\n    const {data:images, loading} = useFetchGifs(category);\r\n    \r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n                {loading &&<p>Loading...</p>}\r\n                 <div className=\"card-grid\" >\r\n                    {\r\n                        images.map(img =>(\r\n                            <GifGridItem \r\n                                key={img.id}\r\n                            {...img}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n","import  {useState, useEffect} from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs=(category)=>{\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    useEffect(()=>{\r\n        getGifs(category).then(imgs =>{\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n        })\r\n    },[category])\r\n  \r\n    return state;\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    //const categories =['One Punch', 'Samurai', 'Scannor'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    \r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory   setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category=> (\r\n                        <GifGrid\r\n                            key ={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}